// Generated by gencpp from file spot_trajectory_planner/ExecuteTrajectoryFeedback.msg
// DO NOT EDIT!


#ifndef SPOT_TRAJECTORY_PLANNER_MESSAGE_EXECUTETRAJECTORYFEEDBACK_H
#define SPOT_TRAJECTORY_PLANNER_MESSAGE_EXECUTETRAJECTORYFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_trajectory_planner
{
template <class ContainerAllocator>
struct ExecuteTrajectoryFeedback_
{
  typedef ExecuteTrajectoryFeedback_<ContainerAllocator> Type;

  ExecuteTrajectoryFeedback_()
    : cur_node(0)
    , feedback()  {
    }
  ExecuteTrajectoryFeedback_(const ContainerAllocator& _alloc)
    : cur_node(0)
    , feedback(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _cur_node_type;
  _cur_node_type cur_node;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _feedback_type;
  _feedback_type feedback;





  typedef boost::shared_ptr< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteTrajectoryFeedback_

typedef ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<std::allocator<void> > ExecuteTrajectoryFeedback;

typedef boost::shared_ptr< ::spot_trajectory_planner::ExecuteTrajectoryFeedback > ExecuteTrajectoryFeedbackPtr;
typedef boost::shared_ptr< ::spot_trajectory_planner::ExecuteTrajectoryFeedback const> ExecuteTrajectoryFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator1> & lhs, const ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.cur_node == rhs.cur_node &&
    lhs.feedback == rhs.feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator1> & lhs, const ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_trajectory_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60cd4f958cf9318ee157384b971ecd87";
  }

  static const char* value(const ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60cd4f958cf9318eULL;
  static const uint64_t static_value2 = 0xe157384b971ecd87ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_trajectory_planner/ExecuteTrajectoryFeedback";
  }

  static const char* value(const ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"int32 cur_node\n"
"string feedback\n"
"\n"
;
  }

  static const char* value(const ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cur_node);
      stream.next(m.feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteTrajectoryFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_trajectory_planner::ExecuteTrajectoryFeedback_<ContainerAllocator>& v)
  {
    s << indent << "cur_node: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cur_node);
    s << indent << "feedback: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_TRAJECTORY_PLANNER_MESSAGE_EXECUTETRAJECTORYFEEDBACK_H
