// Generated by gencpp from file microstrain_mips/SetFilterHeadingRequest.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_MIPS_MESSAGE_SETFILTERHEADINGREQUEST_H
#define MICROSTRAIN_MIPS_MESSAGE_SETFILTERHEADINGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_mips
{
template <class ContainerAllocator>
struct SetFilterHeadingRequest_
{
  typedef SetFilterHeadingRequest_<ContainerAllocator> Type;

  SetFilterHeadingRequest_()
    : angle(0.0)  {
    }
  SetFilterHeadingRequest_(const ContainerAllocator& _alloc)
    : angle(0.0)  {
  (void)_alloc;
    }



   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetFilterHeadingRequest_

typedef ::microstrain_mips::SetFilterHeadingRequest_<std::allocator<void> > SetFilterHeadingRequest;

typedef boost::shared_ptr< ::microstrain_mips::SetFilterHeadingRequest > SetFilterHeadingRequestPtr;
typedef boost::shared_ptr< ::microstrain_mips::SetFilterHeadingRequest const> SetFilterHeadingRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator1> & lhs, const ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator1> & lhs, const ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_mips

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d11dcdbe5a6f73dd324353dc52315ab";
  }

  static const char* value(const ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d11dcdbe5a6f73dULL;
  static const uint64_t static_value2 = 0xd324353dc52315abULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_mips/SetFilterHeadingRequest";
  }

  static const char* value(const ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 angle\n"
;
  }

  static const char* value(const ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetFilterHeadingRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_mips::SetFilterHeadingRequest_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_MIPS_MESSAGE_SETFILTERHEADINGREQUEST_H
