// Generated by gencpp from file ssl_frontier_selection/GetGradedResponse.msg
// DO NOT EDIT!


#ifndef SSL_FRONTIER_SELECTION_MESSAGE_GETGRADEDRESPONSE_H
#define SSL_FRONTIER_SELECTION_MESSAGE_GETGRADEDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace ssl_frontier_selection
{
template <class ContainerAllocator>
struct GetGradedResponse_
{
  typedef GetGradedResponse_<ContainerAllocator> Type;

  GetGradedResponse_()
    : ids()
    , points()  {
    }
  GetGradedResponse_(const ContainerAllocator& _alloc)
    : ids(_alloc)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _ids_type;
  _ids_type ids;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetGradedResponse_

typedef ::ssl_frontier_selection::GetGradedResponse_<std::allocator<void> > GetGradedResponse;

typedef boost::shared_ptr< ::ssl_frontier_selection::GetGradedResponse > GetGradedResponsePtr;
typedef boost::shared_ptr< ::ssl_frontier_selection::GetGradedResponse const> GetGradedResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator1> & lhs, const ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ids == rhs.ids &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator1> & lhs, const ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ssl_frontier_selection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4cd76d4eb5970ff195c8d52aacd39f1";
  }

  static const char* value(const ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4cd76d4eb5970ffULL;
  static const uint64_t static_value2 = 0x195c8d52aacd39f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ssl_frontier_selection/GetGradedResponse";
  }

  static const char* value(const ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# response\n"
"int32[] ids\n"
"geometry_msgs/Point[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ids);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGradedResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ssl_frontier_selection::GetGradedResponse_<ContainerAllocator>& v)
  {
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ids[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SSL_FRONTIER_SELECTION_MESSAGE_GETGRADEDRESPONSE_H
