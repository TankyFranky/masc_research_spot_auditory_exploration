// Generated by gencpp from file spot_msgs/MaplessTrajectoryFeedback.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_MAPLESSTRAJECTORYFEEDBACK_H
#define SPOT_MSGS_MESSAGE_MAPLESSTRAJECTORYFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct MaplessTrajectoryFeedback_
{
  typedef MaplessTrajectoryFeedback_<ContainerAllocator> Type;

  MaplessTrajectoryFeedback_()
    : error()
    , feedback()
    , current_attempt(0)  {
    }
  MaplessTrajectoryFeedback_(const ContainerAllocator& _alloc)
    : error(_alloc)
    , feedback(_alloc)
    , current_attempt(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _error_type;
  _error_type error;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _feedback_type;
  _feedback_type feedback;

   typedef int32_t _current_attempt_type;
  _current_attempt_type current_attempt;





  typedef boost::shared_ptr< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MaplessTrajectoryFeedback_

typedef ::spot_msgs::MaplessTrajectoryFeedback_<std::allocator<void> > MaplessTrajectoryFeedback;

typedef boost::shared_ptr< ::spot_msgs::MaplessTrajectoryFeedback > MaplessTrajectoryFeedbackPtr;
typedef boost::shared_ptr< ::spot_msgs::MaplessTrajectoryFeedback const> MaplessTrajectoryFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator1> & lhs, const ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.error == rhs.error &&
    lhs.feedback == rhs.feedback &&
    lhs.current_attempt == rhs.current_attempt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator1> & lhs, const ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98751604b46a4e51af4fd37d5b14d6e7";
  }

  static const char* value(const ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98751604b46a4e51ULL;
  static const uint64_t static_value2 = 0xaf4fd37d5b14d6e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/MaplessTrajectoryFeedback";
  }

  static const char* value(const ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"geometry_msgs/Pose error\n"
"string feedback\n"
"int32 current_attempt\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error);
      stream.next(m.feedback);
      stream.next(m.current_attempt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MaplessTrajectoryFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::MaplessTrajectoryFeedback_<ContainerAllocator>& v)
  {
    s << indent << "error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.error);
    s << indent << "feedback: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.feedback);
    s << indent << "current_attempt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_attempt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_MAPLESSTRAJECTORYFEEDBACK_H
