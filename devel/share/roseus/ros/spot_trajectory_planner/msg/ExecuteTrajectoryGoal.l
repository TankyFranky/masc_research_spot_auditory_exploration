;; Auto-generated. Do not edit!


(when (boundp 'spot_trajectory_planner::ExecuteTrajectoryGoal)
  (if (not (find-package "SPOT_TRAJECTORY_PLANNER"))
    (make-package "SPOT_TRAJECTORY_PLANNER"))
  (shadow 'ExecuteTrajectoryGoal (find-package "SPOT_TRAJECTORY_PLANNER")))
(unless (find-package "SPOT_TRAJECTORY_PLANNER::EXECUTETRAJECTORYGOAL")
  (make-package "SPOT_TRAJECTORY_PLANNER::EXECUTETRAJECTORYGOAL"))

(in-package "ROS")
;;//! \htmlinclude ExecuteTrajectoryGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass spot_trajectory_planner::ExecuteTrajectoryGoal
  :super ros::object
  :slots (_frontier_plan _parent_id _add_frontier ))

(defmethod spot_trajectory_planner::ExecuteTrajectoryGoal
  (:init
   (&key
    ((:frontier_plan __frontier_plan) (instance geometry_msgs::PoseArray :init))
    ((:parent_id __parent_id) 0)
    ((:add_frontier __add_frontier) nil)
    )
   (send-super :init)
   (setq _frontier_plan __frontier_plan)
   (setq _parent_id (round __parent_id))
   (setq _add_frontier __add_frontier)
   self)
  (:frontier_plan
   (&rest __frontier_plan)
   (if (keywordp (car __frontier_plan))
       (send* _frontier_plan __frontier_plan)
     (progn
       (if __frontier_plan (setq _frontier_plan (car __frontier_plan)))
       _frontier_plan)))
  (:parent_id
   (&optional __parent_id)
   (if __parent_id (setq _parent_id __parent_id)) _parent_id)
  (:add_frontier
   (&optional (__add_frontier :null))
   (if (not (eq __add_frontier :null)) (setq _add_frontier __add_frontier)) _add_frontier)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseArray _frontier_plan
    (send _frontier_plan :serialization-length)
    ;; int32 _parent_id
    4
    ;; bool _add_frontier
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseArray _frontier_plan
       (send _frontier_plan :serialize s)
     ;; int32 _parent_id
       (write-long _parent_id s)
     ;; bool _add_frontier
       (if _add_frontier (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseArray _frontier_plan
     (send _frontier_plan :deserialize buf ptr-) (incf ptr- (send _frontier_plan :serialization-length))
   ;; int32 _parent_id
     (setq _parent_id (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; bool _add_frontier
     (setq _add_frontier (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get spot_trajectory_planner::ExecuteTrajectoryGoal :md5sum-) "d9d017ffa8c844d5c0848ed4125c8d0c")
(setf (get spot_trajectory_planner::ExecuteTrajectoryGoal :datatype-) "spot_trajectory_planner/ExecuteTrajectoryGoal")
(setf (get spot_trajectory_planner::ExecuteTrajectoryGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Action
geometry_msgs/PoseArray frontier_plan
int32 parent_id
bool add_frontier


================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :spot_trajectory_planner/ExecuteTrajectoryGoal "d9d017ffa8c844d5c0848ed4125c8d0c")


