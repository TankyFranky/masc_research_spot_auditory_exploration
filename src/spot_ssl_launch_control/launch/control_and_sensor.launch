<launch>
  <!-- Localization Args-->
  <arg name="localize" default="true" />
  <arg name="gps" default="false"/>

  <!-- REFERENCE FRAMES -->
  <arg name="imu_frame_id" value="imu" />
  <arg name="gps_frame_id" value="gps"/>
  <arg name="mic_frame_id" value="mic"/>

  <!-- IF GPS THEN LOCALIZED FRAME IS WORLD -->
  <arg name="localized_frame_id" default="odom" unless="$(arg gps)"/>
  <arg name="localized_frame_id" value="world" if="$(arg gps)" />
  
  <arg name="base_frame_id" value="body"/>

  <!-- Spot ROS Sign In Args -->
  <arg name="username" default="francesco" />
  <arg name="password" default="Bad@Coffee24" />
  <arg name="hostname" default="192.168.50.3" />
  <arg name="estop_timeout" default="5.0"/>

  <!-- Changeable between odom and vision -->
  <arg name="odom" default="vision"/>

  <!-- LOGGING ARGS -->
  <arg name="logging" default="log"/>

  <include file="$(find spot_description)/launch/description.launch" />
  <!-- FOR XBOX CONTROL include file="$(find spot_driver)/launch/control.launch" / -->
  <include file="$(find spot_driver)/launch/accessories.launch" />

  <!-- Clearpath Spot driver launch -->
  <!-- Mapless controller params stored in spot_ros.yaml -->
  <node pkg="spot_driver" type="spot_ros" name="spot_ros"  ns="spot" output="$(arg logging)">
    <rosparam file="$(find spot_driver)/config/spot_ros.yaml" command="load" />
    <param name="mapless_controller/localized_frame" value="$(arg localized_frame_id)" />
    <param name="username" value="$(arg username)" />
    <param name="password" value="$(arg password)" />
    <param name="hostname" value="$(arg hostname)" />
    <param name="mode_parent_odom_tf" value="$(arg odom)" />
    <param name="estop_timeout" value="$(arg estop_timeout)"/>
    <remap from="joint_states" to="/joint_states"/>
    <remap from="tf" to="/tf"/>
  </node>

  <!-- GPS and IMU -->
  <!-- If no GPS, then localize using IMU and Odometry -->
  
  <!-- IMU Setup -->
  <!-- Declare arguments with default values -->
  <arg name="port" default="/dev/ttyACM1" />
  <arg name="baudrate" default="115200" />
  <arg name="imu_rate" default="100" />
  
  <!-- Microstrain sensor node -->
  <node name="microstrain_imu"
  pkg="microstrain_mips"
  type="microstrain_mips_node" output="$(arg logging)"
  ns="spot" >
    <param name="port" value="$(arg port)" type="str" />
    <param name="baudrate" value="$(arg baudrate)" type="int" />

    <param name="device_setup" value="true" type="bool" />
    <!-- General Settings -->
    <param name="readback_settings" value="false" type="bool" />
    <param name="save_settings" value="true" type="bool" />
    <param name="auto_init" value="true" type="bool" />

    <!-- This parameter is to set wether the device orientation uses a basic 
      NED->ENU orientation swap or not. If true, the ENU reported should
      match the label printed on the device. If false X & Y are swapped
      and Z is negated. -->
    <param name="frame_based_enu" value="true" type="bool" />

    <!-- The GX5-25 is AHRS only, so need to turn off the other messages -->
    <!-- AHRS Settings -->
    <param name="publish_imu" value="true" type="bool" />
    <param name="imu_rate" value="$(arg imu_rate)" type="int" />
    <param name="imu_frame_id" value="$(arg imu_frame_id)" type="str" />
    <!-- Declination source 1=None, 2=magnetic, 3=manual -->
    <param name="declination_source" value="2" type="int" />
    <param name="declination" value="0.2115" type="double" />
    <!-- Filtered IMU rate is based on nav_rate since it is tied in with the onboard Kalman Filter -->
    <!-- If you set the filtered_imu rate to be something fairly high, make sure to lower the IMU rate
          above since it appears that the data rate can flood the USB. -->
    <param name="publish_filtered_imu" value="true" type="bool" />
    <!-- Remove gravity is only valid with the filtered IMU data. -->
    <param name="remove_imu_gravity" value="false" type="bool" />
    <!-- Static IMU message covariance values -->
    <!-- Since internally these are std::vector we need to use the rosparam tags -->
    <rosparam param="imu_orientation_cov"> [0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.01]</rosparam>
    <rosparam param="imu_linear_cov"> [0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.01]</rosparam>
    <rosparam param="imu_angular_cov"> [0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.01]</rosparam>

  </node>

  <!-- GPS Setup -->
  <group if="$(arg gps)">
    <arg name="param_file_name"     default="ublox_neo_m9n" doc="name of param file, e.g. rover" />
    <arg name="param_file_dir"  default="$(find spot_driver)/sensor_configs" />
  
    <arg name="node_name"           doc="name of this node"
                                    default="backpack_gps" />
    <arg name="output"              default="$(arg logging)" />
    <arg name="respawn"             default="true" />
    <arg name="respawn_delay"       default="1" />
    <arg name="clear_params"        default="false" />
  
    <node pkg="ublox_gps" type="ublox_gps" name="$(arg node_name)"
          output="$(arg output)"
          clear_params="$(arg clear_params)"
          respawn="$(arg respawn)"
          respawn_delay="$(arg respawn_delay)">
      <param name="frame_id" value="$(arg gps_frame_id)" type="str" />
      <rosparam command="load"
                file="$(arg param_file_dir)/$(arg param_file_name).yaml" />
    </node>
  </group>

  <!-- Robot Localization Package -->
  <!-- IMU + Odometry Localization -->
  <group if="$(arg localize)">
    <rosparam command="load" file="$(find spot_driver)/sensor_configs/spot_localization_odom_gps_imu_ekf.yaml" />
    
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_odom" clear_params="true"/>
  
    <!-- GPS + IMU + Odometry Localization -->
    <group if="$(arg gps)">
      <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_map" clear_params="true">
        <remap from="odometry/filtered" to="odometry/filtered/map"/>
      </node>
    
      <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform" clear_params="true" respawn="true">
        <param name="yaw_offset" value="0"/>
        <remap from="gps/fix" to="backpack_gps/fix"/>
        <remap from="imu/data" to="/spot/filtered/imu/data"/>
        <remap from="odometry/filtered" to="spot/odometry_vis"/>
        <remap from="odometry/gps" to="spot/odometry/gps_trans"/>
      </node>
    </group>
  </group>

  <!-- RGB-D Sensor Filtering and Combining -->
  <!-- include file="$(find spot_ssl_launch_control)/launch/depth_2_pointcloud.launch"/ -->

  <!-- ODAS SSL -->
  <include file="$(find spot_ssl_launch_control)/launch/odas_ssl.launch"/>

</launch>
