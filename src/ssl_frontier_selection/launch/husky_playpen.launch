<?xml version="1.0"?>
<!--
Software License Agreement (BSD)

\file      husky_playpen.launch
\authors   Paul Bovbel <pbovbel@clearpathrobotics.com
\copyright Copyright (c) 2015, Clearpath Robotics, Inc., All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the
   following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
   following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of Clearpath Robotics nor the names of its contributors may be used to endorse or promote
   products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WAR-
RANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, IN-
DIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>

  <include file="$(find husky_gazebo)/launch/playpen.launch" />

  <include file="$(find husky_gazebo)/launch/spawn_husky.launch">
  </include>

  <arg name="encoding" value="32fc1" />
  <arg name="limit_range" value="4.0" />

  <!-- Apply depth limiting filter to each depth image -->
  <node pkg="ssl_exploration" type="depth_limiter" name="limiter_front">
    <param name="input_topic" value="/spot/depth/front/image_raw" />
    <param name="output_topic" value="/spot/depth/front/limited" />
    <param name="encoding" value="$(arg encoding)" />
    <param name="max_range" value="$(arg limit_range)" />
  </node>

  <node pkg="ssl_exploration" type="depth_limiter" name="limiter_left">
    <param name="input_topic" value="/spot/depth/left/image_raw" />
    <param name="output_topic" value="/spot/depth/left/limited" />
    <param name="encoding" value="$(arg encoding)" />
    <param name="max_range" value="$(arg limit_range)" />
  </node>

  <node pkg="ssl_exploration" type="depth_limiter" name="limiter_right">
    <param name="input_topic" value="/spot/depth/right/image_raw" />
    <param name="output_topic" value="/spot/depth/right/limited" />
    <param name="encoding" value="$(arg encoding)" />
    <param name="max_range" value="$(arg limit_range)" />
  </node>

  <!-- Convert each depth image into a point cloud-->
  <node ns="depth_2_cloud" pkg="nodelet" type="nodelet" args="standalone depth_image_proc/point_cloud_xyz" name="front_cloud">
      <remap from="camera_info"         to="/spot/depth/front/camera_info"/>
      <remap from="image_rect"       to="/spot/depth/front/limited"/>
      <remap from="points" to="cloud/front"/>
  </node>

  <node ns="depth_2_cloud" pkg="nodelet" type="nodelet" args="standalone depth_image_proc/point_cloud_xyz" name="left_cloud">
      <remap from="camera_info"         to="/spot/depth/left/camera_info"/>
      <remap from="image_rect"       to="/spot/depth/left/limited"/>
      <remap from="points" to="cloud/left"/>
  </node>

  <node ns="depth_2_cloud" pkg="nodelet" type="nodelet" args="standalone depth_image_proc/point_cloud_xyz" name="right_cloud">
      <remap from="camera_info"         to="/spot/depth/right/camera_info"/>
      <remap from="image_rect"       to="/spot/depth/right/limited"/>
      <remap from="points" to="cloud/right"/>
  </node>
  
  <!-- Combine into a single poitn cloud -->
  <arg name="input_topics" default="[/depth_2_cloud/cloud/front, /depth_2_cloud/cloud/left, /depth_2_cloud/cloud/right]" />
  <arg name="output_topic" default="/points_concat" />
  <arg name="output_frame_id" default="base_link" />

  <node pkg="points_preprocessor" type="points_concat_filter"
        name="points_concat_filter" output="screen">
    <param name="output_frame_id" value="$(arg output_frame_id)" />
    <param name="input_topics" value="$(arg input_topics)" />
    <remap from="/points_concat" to="$(arg output_topic)" />
  </node>
  

</launch>
